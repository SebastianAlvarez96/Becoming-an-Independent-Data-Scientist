dpath = "E:/Escritorio/Universidad/"
import pandas as pd
#The format of the data file is somewhat strange. I have to ignore the first column, the second line 
#(which contains the units), and the last 8 lines (which contain a summary of the data)
dataB = pd.read_csv(dpath+"StationData-Bogota_SanCristobal.txt", sep='|', parse_dates=[1], dayfirst=True, 
                    skipinitialspace=True, decimal=',', usecols=[1,2,3], skiprows=[1,2], skipfooter=8, engine='python')
dataB.columns = ["FechaHora", "PM2.5", "PM10"]

#The spaces at the end of the dates cause problems at parsing
dataB["FechaHora"] = dataB["FechaHora"].apply(lambda l: l.strip())

#Correcting the hour format 1:00 (which gives many problems at parsing) to 01:00
import re
def dashrepl(matchobj):
    return " 0" + matchobj.group(0)[1:]

dataB["FechaHora"] = dataB["FechaHora"].apply(lambda l: re.sub(r' [1-9]:', dashrepl, l))

#Correcting the hour format 24:00 (which is not understood by the parser) to "23:59" (closest minute of the same day)
dataB["FechaHora"] = dataB["FechaHora"].apply(lambda l: l.replace("24:00", "23:59"))

dataB["FechaHora"] = pd.to_datetime(dataB["FechaHora"], format="%d-%m-%Y %H:%M")

#A date_index object that will be used for several tasks
date_index = pd.DatetimeIndex(dataB['FechaHora'])

#The main index will be the Monty-Day combination
dataB["Year"] = date_index.year
dataB["Month"] = date_index.month
dataB["Day"] = date_index.day

#The daily 24-hours mean
data_mean_2_B = dataB.groupby(["Year", "Month", "Day"])["PM2.5"].mean()
data_mean_10_B = dataB.groupby(["Year", "Month", "Day"])["PM10"].mean()

#The format of the data file is similar to the one of Bogotá. The data management software is probably the same
dataNY = pd.read_csv(dpath+"StationData-NY_QueensCollege.txt", sep='|', parse_dates=[1], usecols=[1,2], skiprows=[1,2], skipfooter=8, engine='python')

dataNY.columns = ["FechaHora", "PM2.5"]

#Hours, months and days should be zero-padded

#Hours
def zerohour(matchobj):
    return " 0" + matchobj.group(0)[1:]
dataNY["FechaHora"] = dataNY["FechaHora"].apply(lambda l: re.sub(r' [1-9]:', zerohour, l))

#Months and days
def zeroday(matchobj):
    return "/0" + matchobj.group(0)[1:]
def zeromonth(matchobj):
    return " 0" + matchobj.group(0)[1:]

dataNY["FechaHora"] = dataNY["FechaHora"].apply(lambda l: re.sub(r'/[1-9]/', zeroday, l))
dataNY["FechaHora"] = dataNY["FechaHora"].apply(lambda l: re.sub(r' [1-9]/', zeromonth, l))

#The spaces at the end of the dates cause problems at parsing
dataNY["FechaHora"] = dataNY["FechaHora"].apply(lambda l: l.strip())

dataNY["FechaHora"] = pd.to_datetime(dataNY["FechaHora"], format="%m/%d/%Y %I:%M %p")

date_index = pd.DatetimeIndex(dataNY['FechaHora'])

dataNY["Year"] = date_index.year
dataNY["Month"] = date_index.month
dataNY["Day"] = date_index.day

#The spaces at the end of the PM2.5 values also cause problems at parsing
dataNY["PM2.5"] = dataNY["PM2.5"].apply(lambda l: l.strip())
dataNY["PM2.5"] = pd.to_numeric(dataNY["PM2.5"])

#The daily 24-hours mean
data_mean_2_NY = dataNY.groupby(["Year", "Month", "Day"])["PM2.5"].mean()

#World Health Organization's Air Quality Guideline limits (24-hour mean)
#http://apps.who.int/iris/bitstream/10665/69477/1/WHO_SDE_PHE_OEH_06.02_eng.pdf
legal_pm2 = 25
legal_pm10 = 50

%matplotlib inline
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['figure.figsize'] = (18, 10)

#X-axis array: daily from 1 Sep 2016 to 1 Apr 2017
import numpy as np
observation_axis = np.arange('2016-09-01', '2017-04-02', dtype='datetime64[D]')
observation_axis = np.array(list(map(pd.to_datetime, observation_axis)))

#Title
plt.suptitle("Particulate Matter concentrations of the last six months - 24-hours mean ($\mu$g/$m^3$)", fontsize=16)
plt.title("Bogotá - San Cristobal / New York - Queens College", fontsize=14)

#PM measures: 24-hours mean
#Bogota
plt.plot(observation_axis, data_mean_2_B.as_matrix(), '-o', observation_axis, data_mean_10_B.as_matrix(), '-o', ms=2.5, alpha=0.95, linewidth=1.5) 
#New York
plt.plot(observation_axis, data_mean_2_NY.as_matrix(), '-o', ms=2.5, alpha=0.95, color='black', linewidth=1.5) 

#WHO Guidelines
plt.axhline(y=legal_pm2, color='darkblue', linestyle='-', linewidth=0.75)
plt.axhline(y=legal_pm10, color='darkgreen', linestyle='-', linewidth=0.75)

#X-axis: months
import matplotlib.dates as mdates
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

#First legend: lines
first_legend = plt.legend(['Bogota PM2.5', 'Bogota PM10', 'NY PM2.5', 'WHO PM2.5 limit', 'WHO PM10 limit'], 
                          loc='center left', bbox_to_anchor=(1.0, 0.55), prop={'size':12})
plt.gca().add_artist(first_legend)

#Second legend: color annotations
import matplotlib.patches as mpatches
patches = [ mpatches.Patch(color='red', label='Values above the WHO limit'), 
           mpatches.Patch(color='c', label='NY values above Bogota values'),
          ]
plt.legend(handles=patches, loc='center left', bbox_to_anchor=(1.0, 0.4), prop={'size':10}, title="Color annotations:")

#When Bogota measures exceed WHO limits?
plt.gca().fill_between(observation_axis, legal_pm2, data_mean_2_B, where=data_mean_2_B>=legal_pm2, 
                       interpolate=True, facecolor='red', alpha=0.65)
plt.gca().fill_between(observation_axis, legal_pm10, data_mean_10_B, where=data_mean_10_B>=legal_pm10, 
                       interpolate=True, facecolor='red', alpha=0.65)

#When NY measures exceed those of Bogota?
plt.gca().fill_between(observation_axis, data_mean_2_B, data_mean_2_NY, where=data_mean_2_NY>data_mean_2_B, 
                       interpolate=True, facecolor='c', alpha=0.65)
